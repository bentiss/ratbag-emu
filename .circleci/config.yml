# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run flake8
      - run:
          name: run flake8
          command: |
            . venv/bin/activate
            pip install flake8
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv
            # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv

      - store_artifacts:
          path: test-reports
          destination: test-reports

  gitlab:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
    working_directory: ~/repo

    steps:
      - run:
          name: contact Gitlab
          command: |
            curl -X POST \
                 -F token=$GITLAB_TOKEN \
                 -F "ref=master" \
                 -F "variables[DIST_SHA1]=$CIRCLE_SHA1" \
                 -F "variables[DIST_BRANCH]=$CIRCLE_BRANCH" \
                 -F "variables[DIST_PR_NUMBER]=$CIRCLE_PR_NUMBER" \
                 -F "variables[DIST_PR_REPONAME]=$CIRCLE_PR_REPONAME" \
                 -F "variables[DIST_PR_USERNAME]=$CIRCLE_PR_USERNAME" \
                 -F "variables[DIST_PROJECT_REPONAME]=$CIRCLE_PROJECT_REPONAME" \
                 -F "variables[DIST_PROJECT_NAMESPACE]=$CIRCLE_PROJECT_USERNAME" \
                 -F "variables[DIST_PULL_REQUEST]=$CIRCLE_PULL_REQUEST" \
                 -F "variables[DIST_REPOSITORY_URL]=$CIRCLE_REPOSITORY_URL" \
                 https://gitlab.freedesktop.org/api/v4/projects/4303/trigger/pipeline

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - gitlab
